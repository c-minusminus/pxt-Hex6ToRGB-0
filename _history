{"entries":[{"timestamp":1759342858099,"editorVersion":"2.0.58","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1537,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":653,"diffs":[[1," "]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":194,"length1":72,"diffs":[[1,"        \"assets.json\"\n"]]},{"start1":223,"length1":362,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"tilemap.g.jres","value":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}"},{"type":"added","filename":"tilemap.g.ts","value":"// Auto-generated code. Do not edit.\nnamespace myTiles {\n    //% fixedInstance jres blockIdentity=images._tile\n    export const transparency16 = image.ofBuffer(hex``);\n\n    helpers._registerFactory(\"tile\", function(name: string) {\n        switch(helpers.stringTrim(name)) {\n            case \"transparency16\":return transparency16;\n        }\n        return null;\n    })\n\n}\n// Auto-generated code. Do not edit.\n"}]},{"timestamp":1759343421117,"editorVersion":"2.0.58","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1825,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"20\" y=\"20\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n. . . . . . . . . . . . . . . . \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":162,"diffs":[[1,""]]},{"start1":35,"length1":45,"diffs":[[1,"    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n    . . . . . . . . . . . . . . . . \n"]]},{"start1":653,"length1":74,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":273,"length1":32,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\",\n"]]},{"start1":345,"length1":1,"diffs":[[1,"        \"#000000\",\n"]]},{"start1":421,"length1":175,"diffs":[[1,"        \"#bb0000\",\n        \"#00bb00\",\n        \"#0000bb\",\n        \"#770000\",\n        \"#007700\",\n        \"#000077\",\n"]]},{"start1":573,"length1":18,"diffs":[[1,"        \"#000033\",\n        \"#123456\",\n        \"#654321\"\n"]]}]}]},{"timestamp":1759344018901,"editorVersion":"2.0.58","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":146,"length1":18,"diffs":[[1,""]]},{"start1":154,"length1":0,"diffs":[[1," * \n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":341,"length1":0,"diffs":[[1,"\n"]]},{"start1":399,"length1":0,"diffs":[[1,"\n"]]},{"start1":457,"length1":0,"diffs":[[1,"\n"]]},{"start1":515,"length1":0,"diffs":[[1,"\n"]]},{"start1":573,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1759344038407,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":2,"length1":25,"diffs":[[1,"    \"name\": \"attempt rgb or something\",\n"]]}]}]},{"timestamp":1759405956299,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":130,"length1":16,"diffs":[[1," * 5-bit colors\n"]]}]}]},{"timestamp":1759405963951,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":23,"length1":100,"diffs":[[1,"    export const ARCADE_SCREEN_WIDTH  = 160 // 160\n    export const ARCADE_SCREEN_HEIGHT = 120 // 120\n"]]},{"start1":130,"length1":84,"diffs":[[1," * 6-bit colors\n * 10 x 10 screen\n"]]},{"start1":168,"length1":147,"diffs":[[1," * \n"]]},{"start1":211,"length1":64,"diffs":[[1,"    2 5 8 b 1 \n    3 6 9 c 1 \n    4 7 a d 1 \n    `, SpriteKind.Player)\nmySprite.setScale(40, ScaleAnchor.Middle)\n"]]},{"start1":356,"length1":209,"diffs":[[1,""]]}]}]},{"timestamp":1759406441491,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":229,"length1":27,"diffs":[[1," *     each color = 0 - 5\n"]]}]}]},{"timestamp":1759494561520,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":229,"length1":29,"diffs":[[1," *     each color = 0 - 5 \n"]]}]}]},{"timestamp":1759494562334,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":229,"length1":426,"diffs":[[1," *     each color = 0 - 5 ()\n * ex.\n * 000 100 200 300 400 500\n * 000 010 020 030 040 050\n * 000 001 002 003 004 005\n"]]},{"start1":536,"length1":296,"diffs":[[1,""]]},{"start1":612,"length1":42,"diffs":[[1,"    // if \\n (?), next row of pixels in sprite\n"]]}]}]},{"timestamp":1759495154236,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":229,"length1":56,"diffs":[[1," *     each color = 0 - 6 (6 is lightest, 1 black, 0 transparent)\n"]]},{"start1":324,"length1":104,"diffs":[[1," * 000 100 200 300 400 500 600 |\\\n * 000 010 020 030 040 050 060 |\\ // acts as below\n * 000 001 002 003 004 005 006\n"]]},{"start1":462,"length1":79,"diffs":[[1," * 000 100 200 300 400 500 600 | 000 010 020 030 040 050 060 | 000 001 002 003 004 005 006\n"]]},{"start1":586,"length1":60,"diffs":[[1," * 000100200300400500600|000010020030040050060|000001002003004005006\n"]]},{"start1":675,"length1":54,"diffs":[[1,""]]},{"start1":810,"length1":42,"diffs":[[1,"function Hex6ToRGB(Hex6: string) {\n"]]},{"start1":887,"length1":220,"diffs":[[1,"    let row: number //(line)   defines current line for sprite\n    let col: number //(pixel)  defines current pixel in line for sprite\n    let num: number //(number) defines which color where on (r, g, or b)\n"]]},{"start1":1139,"length1":339,"diffs":[[1,""]]},{"start1":1140,"length1":118,"diffs":[[1,"\n"]]}]}]},{"timestamp":1759495750082,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":821,"length1":119,"diffs":[[1,"function Hex6ToRGB(Hex6: string): image {\n"]]},{"start1":905,"length1":95,"diffs":[[1,"    let row: number = 0 //(line)   defines current line for sprite\n    let col: number = 0 //(pixel)  defines current pixel in line for sprite\n    let num: number = 0 //(number) defines which color where on (r, g, or b)\n    // rgbImg.setPixel(x, y, c) exists\n    \n"]]},{"start1":1250,"length1":69,"diffs":[[1,"    for (let i = 0; i < Hex6.length; i++) // make image size \n"]]},{"start1":1363,"length1":65,"diffs":[[1,"            \n            \n"]]},{"start1":1411,"length1":21,"diffs":[[1,""]]},{"start1":1427,"length1":100,"diffs":[[1,"    if (width == 0 || height == 0)\n    {\n"]]},{"start1":1508,"length1":41,"diffs":[[1,""]]},{"start1":1509,"length1":306,"diffs":[[1,"    Hex6 = Hex6.replaceAll(\" \", \"\")\n    for (let i = 0; i < Hex6.length; i++) // set pixels\n"]]},{"start1":1607,"length1":175,"diffs":[[1,"        \n"]]},{"start1":1795,"length1":31,"diffs":[[1,""]]}]}]},{"timestamp":1759496350006,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1821,"length1":54,"diffs":[[1,""]]},{"start1":2010,"length1":119,"diffs":[[1,"    // if num = b ()\n    // set img(row, col) to color \n"]]}]}]},{"timestamp":1759496443983,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2064,"length1":9,"diffs":[[1,""]]}]}]},{"timestamp":1759506587853,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2064,"length1":1,"diffs":[[1,""]]}]}]},{"timestamp":1759506596304,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1542,"length1":49,"diffs":[[1,"    rgbImg = image.create(width, height)\n"]]},{"start1":2013,"length1":26,"diffs":[[1,""]]},{"start1":2064,"length1":389,"diffs":[[1,""]]},{"start1":2065,"length1":427,"diffs":[[1,"        \n    // set r,g,b to hex6 (000, 402, exc)\n    // if num = b (2), do:\n    // set img(row, col) to switch statement color\n"]]}]}]},{"timestamp":1759507192600,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2579,"length1":552,"diffs":[[1,"            switch(r)\n            {\n                case 0:\n                case 0:\n                case 0:\n                case 0:\n                case 0:\n                case 0:\n            }\n"]]},{"start1":2784,"length1":15,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":345,"length1":76,"diffs":[[1,""]]},{"start1":364,"length1":76,"diffs":[[1,""]]},{"start1":383,"length1":0,"diffs":[[1,"        \"#cc0000\",\n        \"#00cc00\",\n"]]},{"start1":440,"length1":0,"diffs":[[1,"        \"#990000\",\n        \"#009900\",\n"]]},{"start1":497,"length1":0,"diffs":[[1,"        \"#660000\",\n        \"#006600\",\n"]]},{"start1":554,"length1":0,"diffs":[[1,"        \"#330000\",\n        \"#003300\",\n"]]}]}]},{"timestamp":1759507784941,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":135,"diffs":[[1,"namespace userconfig\n{\n    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n}\n"]]},{"start1":690,"length1":79,"diffs":[[1,"let mySprite = sprites.create(img`\n    1 4 7 a d\n    2 5 8 b e\n    3 6 9 c f\n"]]},{"start1":821,"length1":3,"diffs":[[1,"function Hex6ToRGB(Hex6: string) {\n    // rgbImg.setPixel(x, y, c) exists\n    // start!!!    \n"]]},{"start1":916,"length1":81,"diffs":[[1,""]]},{"start1":917,"length1":35,"diffs":[[1,""]]},{"start1":1077,"length1":56,"diffs":[[1,"    let width:  number = 0\n    let height: number = 0\n"]]},{"start1":1233,"length1":35,"diffs":[[1,"        if (Hex6.charAt(i) == \"|\")\n"]]},{"start1":1426,"length1":17,"diffs":[[1,""]]},{"start1":1465,"length1":60,"diffs":[[1,"    if (width == 0 || height == 0) {\n"]]},{"start1":2559,"length1":13,"diffs":[[1,""]]},{"start1":3156,"length1":0,"diffs":[[1,"\n        // set r,g,b to hex6 (000, 402, exc)\n        // if num = b (2), do:\n        // set img(row, col) to switch statement color\n    \n"]]},{"start1":3304,"length1":119,"diffs":[[1,""]]},{"start1":3473,"length1":18,"diffs":[[1,"    return image.create(0, 0)\n"]]}]}]},{"timestamp":1759508379090,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":125,"diffs":[[1,"//namespace userconfig\n//{\n//    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n//    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n//}\n"]]},{"start1":837,"length1":121,"diffs":[[1,"let mySprite2 = sprites.create(Hex6ToRGB(\"005004003002001|\"), SpriteKind.Player)\n"]]},{"start1":1170,"length1":28,"diffs":[[1,"    let lastl:  number = 0\n"]]},{"start1":1272,"length1":35,"diffs":[[1,"        if (Hex6.charAt(i) != \"|\")\n"]]},{"start1":1317,"length1":69,"diffs":[[1,"            width = Math.max(((lastl + 1) - (i - 1)) / 3, width)\n"]]},{"start1":1465,"length1":0,"diffs":[[1,"    width++\n"]]},{"start1":2886,"length1":208,"diffs":[[1,"            rgbImg.setPixel(row + 1,  col,      g + 5 )\n            rgbImg.setPixel(row + 1,  col + 1,  g + 5 )\n            rgbImg.setPixel(row + 1,  col + 2,  g + 5 )\n"]]},{"start1":3055,"length1":205,"diffs":[[1,"            rgbImg.setPixel(row + 2,  col,      b + 10)\n            rgbImg.setPixel(row + 2,  col + 1,  b + 10)\n            rgbImg.setPixel(row + 2,  col + 2,  b + 10)\n"]]}]}]},{"timestamp":1759508941026,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2105,"length1":19,"diffs":[[1,"            col++\n"]]}]}]},{"timestamp":1759618096274,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":2631,"length1":20,"diffs":[[1,"        if(num == 2)\n"]]}]}]},{"timestamp":1759618102778,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":826,"length1":3,"diffs":[[1,""]]},{"start1":827,"length1":0,"diffs":[[1,"let mySprite2 = sprites.create(Hex6ToRGB(\"500400300200100000|050040030020010000|005004003002001000\"), SpriteKind.Player)\n"]]},{"start1":949,"length1":66,"diffs":[[1,""]]},{"start1":2631,"length1":20,"diffs":[[1,"        if(num . 2)\n"]]},{"start1":2661,"length1":0,"diffs":[[1,"            \n"]]},{"start1":2740,"length1":210,"diffs":[[1,"            rgbImg.setPixel(row,      col,      r     )\n            rgbImg.setPixel(row,      col + 1,  r     )\n            rgbImg.setPixel(row,      col + 2,  r     )\n"]]},{"start1":2909,"length1":140,"diffs":[[1,"            rgbImg.setPixel(row + 1,  col,      g == 0 ? 0 : g + 5 )\n            rgbImg.setPixel(row + 1,  col + 1,  g == 0 ? 0 : g + 5 )\n"]]},{"start1":3118,"length1":210,"diffs":[[1,"            rgbImg.setPixel(row + 2,  col,      b == 0 ? 0 : b + 5)\n            rgbImg.setPixel(row + 2,  col + 1,  b == 0 ? 0 : b + 5)\n            rgbImg.setPixel(row + 2,  col + 2,  b == 0 ? 0 : b + 5 )\n"]]}]}]},{"timestamp":1759618702259,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":690,"length1":35,"diffs":[[1,"/*let mySprite = sprites.create(img`\n"]]},{"start1":791,"length1":446,"diffs":[[1,"controller.moveSprite(mySprite)\n"]]},{"start1":826,"length1":0,"diffs":[[1,"/*\n"]]}]}]},{"timestamp":1759619234484,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":725,"length1":306,"diffs":[[1,"    1 2 3 4 5\n    6 7 8 9 a\n    b c d e f\n"]]},{"start1":789,"length1":87,"diffs":[[1,"controller.moveSprite(example1)\n"]]},{"start1":1201,"length1":145,"diffs":[[1," *     a. for one pixel, example2\n"]]},{"start1":3039,"length1":111,"diffs":[[1,"            // set the 3x3 \"pixel\" in rgbImg\n            rgbImg.setPixel(row,      col,      r == 0 ? 0 : r      )\n            rgbImg.setPixel(row,      col + 1,  r == 0 ? 0 : r      )\n            rgbImg.setPixel(row,      col + 2,  r == 0 ? 0 : r      )\n"]]},{"start1":3295,"length1":122,"diffs":[[1,"            rgbImg.setPixel(row + 1,  col,      g == 0 ? 0 : g + 5  )\n            rgbImg.setPixel(row + 1,  col + 1,  g == 0 ? 0 : g + 5  )\n            rgbImg.setPixel(row + 1,  col + 2,  g == 0 ? 0 : g + 5  )\n"]]},{"start1":3506,"length1":722,"diffs":[[1,"            rgbImg.setPixel(row + 2,  col,      b == 0 ? 0 : b + 10 )\n            rgbImg.setPixel(row + 2,  col + 1,  b == 0 ? 0 : b + 10 )\n            rgbImg.setPixel(row + 2,  col + 2,  b == 0 ? 0 : b + 10 )\n"]]}]}]},{"timestamp":1759619844833,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3543,"length1":38,"diffs":[[1,"            let b0: boolean = b == 0\n"]]}]}]},{"timestamp":1759619847403,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":690,"length1":37,"diffs":[[1,"let example1 = sprites.create(img`\n"]]},{"start1":1031,"length1":24,"diffs":[[1,"`, SpriteKind.Player)\n"]]},{"start1":1670,"length1":121,"diffs":[[1,"let mySprite2 = sprites.create(Hex6ToRGB(\"\"), SpriteKind.Player)\n"]]},{"start1":3543,"length1":37,"diffs":[[1,"            let b0: boolean = b == \\0\n"]]},{"start1":3582,"length1":135,"diffs":[[1,"            if (r0 == true || g0 == true || b0 == true) {\n                if (r0 == true && g0 == true)\n                {\n\n"]]},{"start1":3723,"length1":487,"diffs":[[1,""]]},{"start1":3737,"length1":170,"diffs":[[1,"            else {\n                rgbImg.setPixel(row, col, r == 0 ? 0 : r)\n                rgbImg.setPixel(row, col + 1, r == 0 ? 0 : r)\n                rgbImg.setPixel(row, col + 2, r == 0 ? 0 : r)\n"]]},{"start1":3939,"length1":212,"diffs":[[1,"                rgbImg.setPixel(row + 1, col, g == 0 ? 0 : g + 5)\n                rgbImg.setPixel(row + 1, col + 1, g == 0 ? 0 : g + 5)\n                rgbImg.setPixel(row + 1, col + 2, g == 0 ? 0 : g + 5)\n"]]}]}]},{"timestamp":1759620441986,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3755,"length1":65,"diffs":[[1,"                    \n"]]},{"start1":4054,"length1":54,"diffs":[[1,"                    \n"]]},{"start1":4309,"length1":261,"diffs":[[1,"                rgbImg.drawLine(row, col, row, col + 2, r == 0 ? 0 : r)\n                rgbImg.drawLine(row + 1, col, row + 1, col + 2, g == 0 ? 0 : g + 5)\n\n                //rgbImg.setPixel(row + 1, col, g == 0 ? 0 : g + 5)\n                //rgbImg.setPixel(row + 1, col + 1, g == 0 ? 0 : g + 5)\n                //rgbImg.setPixel(row + 1, col + 2, g == 0 ? 0 : g + 5)\n\n                rgbImg.setPixel(row + 2, col, b == 0 ? 0 : b + 10)\n                rgbImg.setPixel(row + 2, col + 1, b == 0 ? 0 : b + 10)\n                rgbImg.setPixel(row + 2, col + 2, b == 0 ? 0 : b + 10)\n"]]}]}]},{"timestamp":1759620658712,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3641,"length1":13,"diffs":[[1,"            if (r0 == false || g0 == false || b0 == false) {\n                if      (r0 == true && g0 == true) {\n                    // donut with rgbImg.line(x0, y0, x1, y1, c)\n                }\n                else if (g0 == true && b0 == true) {\n                    \n                }\n                else if (b0 == true && r0 == true) {\n                    \n                }\n                else\n                if      (r0 == false && g0 == false) {\n                    // rgbImg.fillrect(x, y, w, h, c)\n                }\n                else if (g0 == false && b0 == false) {\n                    \n                }\n                else if (b0 == false && r0 == false) {\n                    \n                }\n            }\n"]]}]}]},{"timestamp":1759706994270,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3641,"length1":9,"diffs":[[1,"            \n"]]}]}]},{"timestamp":1759706994438,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1831,"length1":60,"diffs":[[1,"    // used everywhere\n    let rgbImg: Image // image for return\n    Hex6 = Hex6.replaceAll(\" \", \"\") // set all spaces to blank string\n\n    // make image size \n"]]},{"start1":2102,"length1":81,"diffs":[[1,"    for (let i = 0; i < Hex6.length; i++)\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n"]]},{"start1":2347,"length1":1,"diffs":[[1,"    \n    // make image / return blank image\n"]]},{"start1":2541,"length1":72,"diffs":[[1,"    // set pixels\n    let row: number = 0 //(line)   defines current line for sprite\n    let col: number = 0 //(pixel)  defines current pixel in line for sprite\n    let num: number = 0 //(r/g/b) defines which color where on (r, g, or b)\n"]]},{"start1":2832,"length1":82,"diffs":[[1,"    for (let i = 0; i < Hex6.length; i++) // loop through characters\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n"]]},{"start1":3048,"length1":22,"diffs":[[1,"        switch(num)\n        {\n"]]},{"start1":3437,"length1":0,"diffs":[[1,"\n\n        // r > g > b > r\n"]]},{"start1":3478,"length1":22,"diffs":[[1,"        if(num > 2)\n        {\n"]]},{"start1":3641,"length1":261,"diffs":[[1,"        \n            {\n                rgbImg.drawLine(row,     col, row,     col + 2,   r == 0 ? 0 : r     )\n                rgbImg.drawLine(row + 1, col, row + 1, col + 2,   g == 0 ? 0 : g + 5 )\n         rgbImg.drawLine(row + 2, col, row + 2, col + 2,   b == 0 ? 0 : b + 10)\n                   }\n     // set the 3x3 \"pixel\" in rgbImg\n            \n"]]},{"start1":4000,"length1":0,"diffs":[[1,"\n"]]},{"start1":4021,"length1":0,"diffs":[[1,"    \n    // set r,g,b to hex6 (000, 402, exc)\n    // if num = b (2), do:\n    // set img(row, col) to switch statement color\n    // loop through Hex6\n    // each iteration, loop through 3 digit number\n    // if |, next row of pixels in sprite\n    // switch statement for pixel color choosing \n\n"]]}]}]},{"timestamp":1759707138151,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1669,"length1":4,"diffs":[[1,""]]}]}]},{"timestamp":1759762951589,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":1669,"length1":7,"diffs":[[1," * \n"]]}]}]},{"timestamp":1759762954315,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":690,"length1":38,"diffs":[[1,"/*let example1 = sprites.create(img`\n"]]},{"start1":1033,"length1":28,"diffs":[[1,"`, SpriteKind.Player)*/\n"]]},{"start1":1144,"length1":145,"diffs":[[1,"\n"]]},{"start1":1669,"length1":160,"diffs":[[1," * 4. \n"]]},{"start1":1680,"length1":0,"diffs":[[1,"\nlet mySprite2 = sprites.create(Hex6ToRGB(\"500400300200100000|050040030020010000|005004003002001000\"), SpriteKind.Player)\n\n"]]}]}]},{"timestamp":1759763475786,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":3735,"length1":3816,"diffs":[[1,""]]}]}]},{"timestamp":1759763688482,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":444,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>"]]}]}]},{"timestamp":1759932419967,"editorVersion":"2.0.59","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":265,"length1":44,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1759342858098,"editorVersion":"2.0.58","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <variables></variables>\n  <block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block>\n</xml>","main.ts":" ","README.md":" ","assets.json":"","pxt.json":"{\n    \"name\": \"attempt rgb or something\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1759405956299,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"namespace userconfig\n{\n    export const ARCADE_SCREEN_WIDTH  = 160 // 160\n    export const ARCADE_SCREEN_HEIGHT = 120 // 120\n}\n/*\n * 5-bit colors\n * 10 x 10 screen\n * \n * \n*/\n\nlet mySprite = sprites.create(img`\n    2 5 8 b 1 \n    3 6 9 c 1 \n    4 7 a d 1 \n    `, SpriteKind.Player)\nmySprite.setScale(40, ScaleAnchor.Middle)\ncontroller.moveSprite(mySprite)\n","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"attempt rgb or something\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"palette\": [\n        \"#000000\",\n        \"#ff0000\",\n        \"#00ff00\",\n        \"#0000ff\",\n        \"#cc0000\",\n        \"#00cc00\",\n        \"#0000cc\",\n        \"#990000\",\n        \"#009900\",\n        \"#000099\",\n        \"#660000\",\n        \"#006600\",\n        \"#000066\",\n        \"#330000\",\n        \"#003300\",\n        \"#000033\"\n    ]\n}\n"}},{"timestamp":1759508406067,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"//namespace userconfig\n//{\n//    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n//    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n//}\n/*\n * 6-bit colors (transparent = black)\n * want 10 x 10 screen\n * need 30 x 30 screen\n * \n * Hex6ToRGB\n *     each color = 0 - 5 (5 is lightest, 0 is darkest)\n *     | = next line\n * ex. \n * 000 100 200 300 400 500 |\\\n * 000 010 020 030 040 050 |\\ // acts as below\n * 000 001 002 003 004 005\n * or (acts as below)\n * 000 100 200 300 400 500 | 000 010 020 030 040 050 | 000 001 002 003 004 005\n * or // how it will be formated\n * 000100200300400500|000010020030040050|000001002003004005\n * converts to RGBs\n * \n * if formatted wrong, it will return blank image\n*/\n\n/*let mySprite = sprites.create(img`\n    1 2 3 4 5\n    6 7 8 9 a\n    b c d e f\n`, SpriteKind.Player)\ncontroller.moveSprite(mySprite)\n*/\n\nlet mySprite2 = sprites.create(Hex6ToRGB(\"005004003002001|\"), SpriteKind.Player)\n\nfunction Hex6ToRGB(Hex6: string) {\n    // used everywhere\n    let rgbImg: Image // image for return\n    Hex6 = Hex6.replaceAll(\" \", \"\") // set all spaces to blank string\n\n    // make image size \n    let width:  number = -1\n    let height: number = -1\n    let lastl:  number = 0\n    let lcount: number = 0\n    for (let i = 0; i < Hex6.length; i++)\n    {\n        if (Hex6.charAt(i) != \"|\")\n        {\n            width = Math.max(((lastl + 1) - (i - 1)) / 3, width)\n            lastl = i\n            lcount++\n        }\n    }\n    height = lcount + 1\n    width++\n    \n    // make image / return blank image\n    console.log(width)\n    if (width <= 0 || height <= 0) {\n        return image.create(0, 0)\n    }\n    rgbImg = image.create(width * 3, height * 3)\n\n    // set pixels\n    let row: number = 0 //(line)   defines current line for sprite\n    let col: number = 0 //(pixel)  defines current pixel in line for sprite\n    let num: number = 0 //(r/g/b) defines which color where on (r, g, or b)\n    let r: number\n    let g: number\n    let b: number\n    for (let i = 0; i < Hex6.length; i++) // loop through characters\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n            col++\n            num = 0; // r\n            row = 0\n            continue\n        }\n        switch(num)\n        {\n            case 0:\n                r = parseInt(Hex6.charAt(i))\n                break\n            case 1:\n                g = parseInt(Hex6.charAt(i))\n                break\n            case 2:\n                b = parseInt(Hex6.charAt(i))\n                break\n            default:\n                r = parseInt(Hex6.charAt(i))\n                break\n        }\n\n\n        // r > g > b > r\n        num++\n        if(num == 2)\n        {\n            \n            num = 0\n\n            // set the 3x3 \"pixel\" in rgbImg\n            rgbImg.setPixel(row,      col,      r     )\n            rgbImg.setPixel(row,      col + 1,  r     )\n            rgbImg.setPixel(row,      col + 2,  r     )\n\n            rgbImg.setPixel(row + 1,  col,      g + 5 )\n            rgbImg.setPixel(row + 1,  col + 1,  g + 5 )\n            rgbImg.setPixel(row + 1,  col + 2,  g + 5 )\n\n            rgbImg.setPixel(row + 2,  col,      b + 10)\n            rgbImg.setPixel(row + 2,  col + 1,  b + 10)\n            rgbImg.setPixel(row + 2,  col + 2,  b + 10)\n        }\n\n        row++\n    }\n    \n    // set r,g,b to hex6 (000, 402, exc)\n    // if num = b (2), do:\n    // set img(row, col) to switch statement color\n    // loop through Hex6\n    // each iteration, loop through 3 digit number\n    // if |, next row of pixels in sprite\n    // switch statement for pixel color choosing \n\n    return rgbImg\n}","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"6-bit rgb\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"palette\": [\n        \"#000000\",\n        \"#ff0000\",\n        \"#cc0000\",\n        \"#990000\",\n        \"#660000\",\n        \"#330000\",\n        \"#00ff00\",\n        \"#00cc00\",\n        \"#009900\",\n        \"#006600\",\n        \"#003300\",\n        \"#0000ff\",\n        \"#0000cc\",\n        \"#000099\",\n        \"#000066\",\n        \"#000033\"\n    ]\n}\n"}},{"timestamp":1759619897053,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"namespace userconfig\n{\n    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n}\n/*\n * 6-bit colors (transparent = black)\n * want 10 x 10 screen\n * need 30 x 30 screen\n * \n * Hex6ToRGB\n *     each color = 0 - 5 (5 is lightest, 0 is darkest)\n *     | = next line\n * ex. \n * 000 100 200 300 400 500 |\\\n * 000 010 020 030 040 050 |\\ // acts as below\n * 000 001 002 003 004 005\n * or (acts as below)\n * 000 100 200 300 400 500 | 000 010 020 030 040 050 | 000 001 002 003 004 005\n * or // how it will be formated\n * 000100200300400500|000010020030040050|000001002003004005\n * converts to RGBs\n * \n * if formatted wrong, it will return blank image\n*/\n\nlet example1 = sprites.create(img`\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n`, SpriteKind.Player)\nlet mySprite = sprites.create(img`\n    1 a .\n    1 a .\n    1 a .\n`, SpriteKind.Player)\n\n/* how to use:\n * make a basic image with:\n * 1.  the colors you choose from are the colors given\n * 2.  the width and height of the image is a multiple of 3\n * 1.  one \"pixel\" is a 3x3 pixel contaning:\n *     a.  3 reds in the left column\n *     b.  3 greens in the middle column\n *     c.  3 blues in the right column\n * 3.  you have to reimagine the colors in a 3-digit code:\n *     a. for one pixel, look at example2.\n *         for red, you have a 5\n *         for green, you have a 1\n *         for blue, you have a 0\n*/\n\n\nlet mySprite2 = sprites.create(Hex6ToRGB(\"\"), SpriteKind.Player)\n\nfunction Hex6ToRGB(Hex6: string) {\n    // used everywhere\n    let rgbImg: Image // image for return\n    Hex6 = Hex6.replaceAll(\" \", \"\") // set all spaces to blank string\n\n    // make image size \n    let width:  number = -1\n    let height: number = -1\n    let lastl:  number = -1\n    let lcount: number = 0\n    for (let i = 0; i < Hex6.length; i++)\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n            width = Math.max(((i - 1) - (lastl + 1) + 1) / 3, width)\n            lastl = i\n            lcount++\n        }\n    }\n    height = lcount + 1\n    \n    // make image / return blank image\n    console.log(width)\n    if (width <= 0 || height <= 0) {\n        return image.create(0, 0)\n    }\n    rgbImg = image.create(width * 3, height * 3)\n\n    // set pixels\n    let row: number = 0 //(line)   defines current line for sprite\n    let col: number = 0 //(pixel)  defines current pixel in line for sprite\n    let num: number = 0 //(r/g/b) defines which color where on (r, g, or b)\n    let r: number\n    let g: number\n    let b: number\n    for (let i = 0; i < Hex6.length; i++) // loop through characters\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n            col+=3\n            num = 0; // r\n            row = 0\n            continue\n        }\n        switch(num)\n        {\n            case 0:\n                r = parseInt(Hex6.charAt(i))\n                break\n            case 1:\n                g = parseInt(Hex6.charAt(i))\n                break\n            case 2:\n                b = parseInt(Hex6.charAt(i))\n                break\n            default:\n                r = parseInt(Hex6.charAt(i))\n                break\n        }\n\n\n        // r > g > b > r\n        num++\n        if(num > 2)\n        {\n            num = 0\n\n            let r0: boolean = r == 0\n            let g0: boolean = g == 0\n            let b0: boolean = b == 0\n\n            if (r0 == true || g0 == true || b0 == true) {\n                if (r0 == true && g0 == true)\n                {\n                    \n                }\n                else if (r0 == true && g0 == true) {\n\n                }\n                else if (r0 == true && g0 == true) {\n\n                }\n            }\n            else {\n                rgbImg.setPixel(row, col, r == 0 ? 0 : r)\n                rgbImg.setPixel(row, col + 1, r == 0 ? 0 : r)\n                rgbImg.setPixel(row, col + 2, r == 0 ? 0 : r)\n\n                rgbImg.setPixel(row + 1, col, g == 0 ? 0 : g + 5)\n                rgbImg.setPixel(row + 1, col + 1, g == 0 ? 0 : g + 5)\n                rgbImg.setPixel(row + 1, col + 2, g == 0 ? 0 : g + 5)\n\n                rgbImg.setPixel(row + 2, col, b == 0 ? 0 : b + 10)\n                rgbImg.setPixel(row + 2, col + 1, b == 0 ? 0 : b + 10)\n                rgbImg.setPixel(row + 2, col + 2, b == 0 ? 0 : b + 10)\n            }\n            // set the 3x3 \"pixel\" in rgbImg\n            \n        }\n\n        row++\n    }\n    \n    // set r,g,b to hex6 (000, 402, exc)\n    // if num = b (2), do:\n    // set img(row, col) to switch statement color\n    // loop through Hex6\n    // each iteration, loop through 3 digit number\n    // if |, next row of pixels in sprite\n    // switch statement for pixel color choosing \n\n    return rgbImg\n}","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"6-bit rgb\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"palette\": [\n        \"#000000\",\n        \"#ff0000\",\n        \"#cc0000\",\n        \"#990000\",\n        \"#660000\",\n        \"#330000\",\n        \"#00ff00\",\n        \"#00cc00\",\n        \"#009900\",\n        \"#006600\",\n        \"#003300\",\n        \"#0000ff\",\n        \"#0000cc\",\n        \"#000099\",\n        \"#000066\",\n        \"#000033\"\n    ]\n}\n"}},{"timestamp":1759706994270,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"namespace userconfig\n{\n    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n}\n/*\n * 6-bit colors (transparent = black)\n * want 10 x 10 screen\n * need 30 x 30 screen\n * \n * Hex6ToRGB\n *     each color = 0 - 5 (5 is lightest, 0 is darkest)\n *     | = next line\n * ex. \n * 000 100 200 300 400 500 |\\\n * 000 010 020 030 040 050 |\\ // acts as below\n * 000 001 002 003 004 005\n * or (acts as below)\n * 000 100 200 300 400 500 | 000 010 020 030 040 050 | 000 001 002 003 004 005\n * or // how it will be formated\n * 000100200300400500|000010020030040050|000001002003004005\n * converts to RGBs\n * \n * if formatted wrong, it will return blank image\n*/\n\n/*let example1 = sprites.create(img`\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n`, SpriteKind.Player)*/\nlet mySprite = sprites.create(img`\n    1 a .\n    1 a .\n    1 a .\n`, SpriteKind.Player)\n\n/* how to use:\n * make a basic image with:\n * 1.  the colors you choose from are the colors given\n * 2.  the width and height of the image is a multiple of 3\n * 1.  one \"pixel\" is a 3x3 pixel contaning:\n *     a.  3 reds in the left column\n *     b.  3 greens in the middle column\n *     c.  3 blues in the right column\n * 3.  you have to reimagine the colors in a 3-digit code:\n *     a. for one pixel, look at example2.\n *         for red, you have a 5\n *         for green, you have a 1\n *         for blue, you have a 0\n*/\n\n\nlet mySprite2 = sprites.create(Hex6ToRGB(\"500400300200100000|050040030020010000|005004003002001000\"), SpriteKind.Player)\n\nfunction Hex6ToRGB(Hex6: string) {\n    // used everywhere\n    let rgbImg: Image // image for return\n    Hex6 = Hex6.replaceAll(\" \", \"\") // set all spaces to blank string\n\n    // make image size \n    let width:  number = -1\n    let height: number = -1\n    let lastl:  number = -1\n    let lcount: number = 0\n    for (let i = 0; i < Hex6.length; i++)\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n            width = Math.max(((i - 1) - (lastl + 1) + 1) / 3, width)\n            lastl = i\n            lcount++\n        }\n    }\n    height = lcount + 1\n    \n    // make image / return blank image\n    console.log(width)\n    if (width <= 0 || height <= 0) {\n        return image.create(0, 0)\n    }\n    rgbImg = image.create(width * 3, height * 3)\n\n    // set pixels\n    let row: number = 0 //(line)   defines current line for sprite\n    let col: number = 0 //(pixel)  defines current pixel in line for sprite\n    let num: number = 0 //(r/g/b) defines which color where on (r, g, or b)\n    let r: number\n    let g: number\n    let b: number\n    for (let i = 0; i < Hex6.length; i++) // loop through characters\n    {\n        if (Hex6.charAt(i) == \"|\")\n        {\n            col+=3\n            num = 0; // r\n            row = 0\n            continue\n        }\n        switch(num)\n        {\n            case 0:\n                r = parseInt(Hex6.charAt(i))\n                break\n            case 1:\n                g = parseInt(Hex6.charAt(i))\n                break\n            case 2:\n                b = parseInt(Hex6.charAt(i))\n                break\n            default:\n                r = parseInt(Hex6.charAt(i))\n                break\n        }\n\n\n        // r > g > b > r\n        num++\n        if(num > 2)\n        {\n            num = 0\n\n            let r0: boolean = r == 0\n            let g0: boolean = g == 0\n            let b0: boolean = b == 0\n\n            if (r0 == false || g0 == false || b0 == false) {\n                if      (r0 == true && g0 == true) {\n                    // donut with rgbImg.line(x0, y0, x1, y1, c)\n                }\n                else if (g0 == true && b0 == true) {\n                    \n                }\n                else if (b0 == true && r0 == true) {\n                    \n                }\n                else\n                if      (r0 == false && g0 == false) {\n                    // rgbImg.fillrect(x, y, w, h, c)\n                }\n                else if (g0 == false && b0 == false) {\n                    \n                }\n                else if (b0 == false && r0 == false) {\n                    \n                }\n            }\n            {\n                rgbImg.drawLine(row,     col, row,     col + 2,   r == 0 ? 0 : r     )\n                rgbImg.drawLine(row + 1, col, row + 1, col + 2,   g == 0 ? 0 : g + 5 )\n                rgbImg.drawLine(row + 2, col, row + 2, col + 2,   b == 0 ? 0 : b + 10)\n            }\n            // set the 3x3 \"pixel\" in rgbImg\n            \n        }\n\n        row++\n    }\n    \n    // set r,g,b to hex6 (000, 402, exc)\n    // if num = b (2), do:\n    // set img(row, col) to switch statement color\n    // loop through Hex6\n    // each iteration, loop through 3 digit number\n    // if |, next row of pixels in sprite\n    // switch statement for pixel color choosing \n\n    return rgbImg\n}","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"6-bit rgb\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"palette\": [\n        \"#000000\",\n        \"#ff0000\",\n        \"#cc0000\",\n        \"#990000\",\n        \"#660000\",\n        \"#330000\",\n        \"#00ff00\",\n        \"#00cc00\",\n        \"#009900\",\n        \"#006600\",\n        \"#003300\",\n        \"#0000ff\",\n        \"#0000cc\",\n        \"#000099\",\n        \"#000066\",\n        \"#000033\"\n    ]\n}\n"}},{"timestamp":1759762951589,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"namespace userconfig\n{\n    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n}\n/*\n * 6-bit colors (transparent = black)\n * want 10 x 10 screen\n * need 30 x 30 screen\n * \n * Hex6ToRGB\n *     each color = 0 - 5 (5 is lightest, 0 is darkest)\n *     | = next line\n * ex. \n * 000 100 200 300 400 500 |\\\n * 000 010 020 030 040 050 |\\ // acts as below\n * 000 001 002 003 004 005\n * or (acts as below)\n * 000 100 200 300 400 500 | 000 010 020 030 040 050 | 000 001 002 003 004 005\n * or // how it will be formated\n * 000100200300400500|000010020030040050|000001002003004005\n * converts to RGBs\n * \n * if formatted wrong, it will return blank image\n*/\n\n/*let example1 = sprites.create(img`\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n`, SpriteKind.Player)*/\nlet mySprite = sprites.create(img`\n    1 a .\n    1 a .\n    1 a .\n`, SpriteKind.Player)\n\n/* how to use:\n * make a basic image with:\n * 1.  the colors you choose from are the colors given\n * 2.  the width and height of the image is a multiple of 3\n * 1.  one \"pixel\" is a 3x3 pixel contaning:\n *     a.  3 reds in the left column\n *     b.  3 greens in the middle column\n *     c.  3 blues in the right column\n * 3.  you have to reimagine the colors in a 3-digit code:\n *     a. for one pixel, look at example2.\n *         for red, you have a 5\n *         for green, you have a 1\n *         for blue, you have a 0\n*/\n\n\nlet mySprite2 = sprites.create(Hex6ToRGB(\"500400300200100000|050040030020010000|005004003002001000\"), SpriteKind.Player)\n\nfunction Hex6ToRGB(Hex6: string) {\n    let rgbImg: Image\n    Hex6 = Hex6.replaceAll(\" \", \"\")\n \n    let width:  number = -1\n    let height: number = -1\n    let lastl:  number = -1\n    let lcount: number = 0\n    for (let i = 0; i < Hex6.length; i++) {\n        if (Hex6.charAt(i) == \"|\") {\n            width = Math.max(((i - 1) - (lastl + 1) + 1) / 3, width)\n            lastl = i\n            lcount++\n        }\n    }\n    height = lcount + 1\n\n    console.log(width)\n    if (width <= 0 || height <= 0) {\n        return image.create(0, 0)\n    }\n    rgbImg = image.create(width * 3, height * 3)\n\n    let row: number = 0\n    let col: number = 0\n    let num: number = 0\n    let r: number\n    let g: number\n    let b: number\n\n    for (let i = 0; i < Hex6.length; i++) {\n        if (Hex6.charAt(i) == \"|\") {\n            col+=3\n            num = 0; // r\n            row = 0\n            continue\n        }\n        switch(num) {\n            case 0:\n                r = parseInt(Hex6.charAt(i))\n                break\n            case 1:\n                g = parseInt(Hex6.charAt(i))\n                break\n            case 2:\n                b = parseInt(Hex6.charAt(i))\n                break\n            default:\n                r = parseInt(Hex6.charAt(i))\n                break\n        }\n        num++\n        if(num > 2) {\n            num = 0\n\n            let r0: boolean = r == 0\n            let g0: boolean = g == 0\n            let b0: boolean = b == 0\n\n            rgbImg.drawLine(row,     col, row,     col + 2,   r == 0 ? 0 : r     )\n            rgbImg.drawLine(row + 1, col, row + 1, col + 2,   g == 0 ? 0 : g + 5 )\n            rgbImg.drawLine(row + 2, col, row + 2, col + 2,   b == 0 ? 0 : b + 10)            \n        }\n        row++\n    }\n    return rgbImg\n}","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"6-bit rgb - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"palette\": [\n        \"#000000\",\n        \"#ff0000\",\n        \"#cc0000\",\n        \"#990000\",\n        \"#660000\",\n        \"#330000\",\n        \"#00ff00\",\n        \"#00cc00\",\n        \"#009900\",\n        \"#006600\",\n        \"#003300\",\n        \"#0000ff\",\n        \"#0000cc\",\n        \"#000099\",\n        \"#000066\",\n        \"#000033\"\n    ]\n}\n"}},{"timestamp":1759932419967,"editorVersion":"2.0.59","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</variable><variable type=\"KIND_SpriteKind\" id=\"=?6B5giQI72,pC^M(1`^\">Player</variable><variable type=\"KIND_SpriteKind\" id=\"$$3n1v9uW^GsKHRGVv:J\">Projectile</variable><variable type=\"KIND_SpriteKind\" id=\"qieU5CwV~~lAglB$mwu}\">Food</variable><variable type=\"KIND_SpriteKind\" id=\"0p:cuAH.l/gLJX!o[pN{\">Enemy</variable></variables><block type=\"pxt-on-start\" x=\"33\" y=\"48\"><statement name=\"HANDLER\"><block type=\"variables_set\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field><value name=\"VALUE\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"spritescreate\"><value name=\"img\"><shadow type=\"screen_image_picker\"><field name=\"img\">img`\n2 5 8 b 1 \n3 6 9 c 1 \n4 7 a d 1 \n`</field><data>{\"commentRefs\":[],\"fieldData\":{\"img\":null}}</data></shadow></value><value name=\"kind\"><shadow type=\"spritekind\"><field name=\"MEMBER\">Player</field></shadow></value></block></value><next><block type=\"sprite_set_scale\"><field name=\"anchor\">ScaleAnchor.Middle</field><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">40</field></shadow></value><next><block type=\"game_control_sprite\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" _expanded=\"0\" _input_init=\"true\"></mutation><value name=\"sprite\"><block type=\"variables_get\"><field name=\"VAR\" id=\"8h4NbyI%Z4J%KRn}E|!m\">mySprite</field></block></value><value name=\"vx\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value><value name=\"vy\"><shadow type=\"spriteSpeedPicker\"><field name=\"speed\">100</field></shadow></value></block></next></block></next></block></statement></block></xml>","main.ts":"namespace userconfig\n{\n    export const ARCADE_SCREEN_WIDTH  = 30 // 160\n    export const ARCADE_SCREEN_HEIGHT = 30 // 120\n}\n/*\n * 6-bit colors (transparent = black)\n * want 10 x 10 screen\n * need 30 x 30 screen\n * \n * Hex6ToRGB\n *     each color = 0 - 5 (5 is lightest, 0 is darkest)\n *     | = next line\n * ex. \n * 000 100 200 300 400 500 |\\\n * 000 010 020 030 040 050 |\\ // acts as below\n * 000 001 002 003 004 005\n * or (acts as below)\n * 000 100 200 300 400 500 | 000 010 020 030 040 050 | 000 001 002 003 004 005\n * or // how it will be formated\n * 000100200300400500|000010020030040050|000001002003004005\n * converts to RGBs\n * \n * if formatted wrong, it will return blank image\n*/\n\n/*\nlet example1 = sprites.create(img`\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . . b . . c . . d . . e . . f\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    . 6 . . 7 . . 8 . . 9 . . a .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n    1 . . 2 . . 3 . . 4 . . 5 . .\n`, SpriteKind.Player)\n*/\n/*\nlet mySprite = sprites.create(img`\n    1 a .\n    1 a .\n    1 a .\n`, SpriteKind.Player)\n*/\n/*\nlet example3 = sprites.create(Hex6ToRGB(\"\n    500400300200100000|\n    050040030020010000|\n    005004003002001000\")\n, SpriteKind.Player)\n*/\n/* how to use:\n * make a basic image with:\n * 1.  the colors you choose from are the colors given\n * 2.  the width and height of the image is a multiple of 3\n * 1.  one \"pixel\" is a 3x3 pixel contaning:\n *     a.  3 reds in the left column\n *     b.  3 greens in the middle column\n *     c.  3 blues in the right column\n * 3.  you have to reimagine the colors in a 3-digit code:\n *     a. for one pixel, look at example2.\n *         for red, you have a 5\n *         for green, you have a 1\n *         for blue, you have a 0\n * 4. make a string (example3)\n *  I highly recommend using a bigger screen than 3x3, and\n *  try to make the sprites / whatever move 3 pixels\n *  instead of 1\n*/\n\nfunction Hex6ToRGB(Hex6: string) {\n    let rgbImg: Image\n    Hex6 = Hex6.replaceAll(\" \", \"\")\n \n    let width:  number = -1\n    let height: number = -1\n    let lastl:  number = -1\n    let lcount: number = 0\n    for (let i = 0; i < Hex6.length; i++) {\n        if (Hex6.charAt(i) == \"|\") {\n            width = Math.max(((i - 1) - (lastl + 1) + 1) / 3, width)\n            lastl = i\n            lcount++\n        }\n    }\n    height = lcount + 1\n\n    console.log(width)\n    if (width <= 0 || height <= 0) {\n        return image.create(0, 0)\n    }\n    rgbImg = image.create(width * 3, height * 3)\n\n    let row: number = 0\n    let col: number = 0\n    let num: number = 0\n    let r: number\n    let g: number\n    let b: number\n\n    for (let i = 0; i < Hex6.length; i++) {\n        if (Hex6.charAt(i) == \"|\") {\n            col+=3\n            num = 0; // r\n            row = 0\n            continue\n        }\n        switch(num) {\n            case 0:\n                r = parseInt(Hex6.charAt(i))\n                break\n            case 1:\n                g = parseInt(Hex6.charAt(i))\n                break\n            case 2:\n                b = parseInt(Hex6.charAt(i))\n                break\n            default:\n                r = parseInt(Hex6.charAt(i))\n                break\n        }\n        num++\n        if(num > 2) {\n            num = 0\n\n            let r0: boolean = r == 0\n            let g0: boolean = g == 0\n            let b0: boolean = b == 0\n\n            rgbImg.drawLine(row,     col, row,     col + 2,   r == 0 ? 0 : r     )\n            rgbImg.drawLine(row + 1, col, row + 1, col + 2,   g == 0 ? 0 : g + 5 )\n            rgbImg.drawLine(row + 2, col, row + 2, col + 2,   b == 0 ? 0 : b + 10)            \n        }\n        row++\n    }\n    return rgbImg\n}\n\n\n// 34957342895673473425873475732475734265432573458934658324893479534763263599347587345\n\n/**\n * Functions are mapped to blocks using various macros\n * in comments starting with %. The most important macro\n * is \"block\", and it specifies that a block should be\n * generated for an **exported** function.\n */\n\n//% color=\"#AA278D\" weight=100\nnamespace Hex6 {\n    /*\n    let example1 = sprites.create(img`\n        . . b . . c . . d . . e . . f\n        . . b . . c . . d . . e . . f\n        . . b . . c . . d . . e . . f\n        . 6 . . 7 . . 8 . . 9 . . a .\n        . 6 . . 7 . . 8 . . 9 . . a .\n        . 6 . . 7 . . 8 . . 9 . . a .\n        1 . . 2 . . 3 . . 4 . . 5 . .\n        1 . . 2 . . 3 . . 4 . . 5 . .\n        1 . . 2 . . 3 . . 4 . . 5 . .\n    `, SpriteKind.Player)\n    */\n    /*\n    let mySprite = sprites.create(img`\n        1 a .\n        1 a .\n        1 a .\n    `, SpriteKind.Player)\n    */\n    /*\n    let example3 = sprites.create(Hex6ToRGB(\"\n        500400300200100000|\n        050040030020010000|\n        005004003002001000\")\n    , SpriteKind.Player)\n    */\n    /* how to use:\n     * make a basic image with:\n     * 1.  the colors you choose from are the colors given\n     * 2.  the width and height of the image is a multiple of 3\n     * 1.  one \"pixel\" is a 3x3 pixel contaning:\n     *     a.  3 reds in the left column\n     *     b.  3 greens in the middle column\n     *     c.  3 blues in the right column\n     * 3.  you have to reimagine the colors in a 3-digit code:\n     *     a. for one pixel, look at example2.\n     *         for red, you have a 5\n     *         for green, you have a 1\n     *         for blue, you have a 0\n     * 4. make a string (example3)\n     *  I highly recommend using a bigger screen than 3x3, and\n     *  try to make the sprites / whatever move 3 pixels\n     *  instead of 1\n    */\n\n    //% block\n    export function ToRGB(Hex6: string) {\n        let rgbImg: Image\n        Hex6 = Hex6.replaceAll(\" \", \"\")\n\n        let width: number = -1\n        let height: number = -1\n        let lastl: number = -1\n        let lcount: number = 0\n        for (let i = 0; i < Hex6.length; i++) {\n            if (Hex6.charAt(i) == \"|\") {\n                width = Math.max(((i - 1) - (lastl + 1) + 1) / 3, width)\n                lastl = i\n                lcount++\n            }\n        }\n        height = lcount + 1\n\n        console.log(width)\n        if (width <= 0 || height <= 0) {\n            return image.create(0, 0)\n        }\n        rgbImg = image.create(width * 3, height * 3)\n\n        let row: number = 0\n        let col: number = 0\n        let num: number = 0\n        let r: number\n        let g: number\n        let b: number\n\n        for (let i = 0; i < Hex6.length; i++) {\n            if (Hex6.charAt(i) == \"|\") {\n                col += 3\n                num = 0; // r\n                row = 0\n                continue\n            }\n            switch (num) {\n                case 0:\n                    r = parseInt(Hex6.charAt(i))\n                    break\n                case 1:\n                    g = parseInt(Hex6.charAt(i))\n                    break\n                case 2:\n                    b = parseInt(Hex6.charAt(i))\n                    break\n                default:\n                    r = parseInt(Hex6.charAt(i))\n                    break\n            }\n            num++\n            if (num > 2) {\n                num = 0\n\n                let r0: boolean = r == 0\n                let g0: boolean = g == 0\n                let b0: boolean = b == 0\n\n                rgbImg.drawLine(row, col, row, col + 2, r == 0 ? 0 : r)\n                rgbImg.drawLine(row + 1, col, row + 1, col + 2, g == 0 ? 0 : g + 5)\n                rgbImg.drawLine(row + 2, col, row + 2, col + 2, b == 0 ? 0 : b + 10)\n            }\n            row++\n        }\n        return rgbImg\n    }\n}","README.md":" ","assets.json":"","tilemap.g.jres":"{\n    \"transparency16\": {\n        \"data\": \"hwQQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==\",\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"tilemapTile\": true\n    },\n    \"*\": {\n        \"mimeType\": \"image/x-mkcd-f4\",\n        \"dataEncoding\": \"base64\",\n        \"namespace\": \"myTiles\"\n    }\n}","tilemap.g.ts":"","pxt.json":"{\n    \"name\": \"6-bit rgb - Copy\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"device\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"assets.json\",\n        \"tilemap.g.jres\",\n        \"tilemap.g.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\",\n    \"palette\": [\n        \"#000000\",\n        \"#ff0000\",\n        \"#cc0000\",\n        \"#990000\",\n        \"#660000\",\n        \"#330000\",\n        \"#00ff00\",\n        \"#00cc00\",\n        \"#009900\",\n        \"#006600\",\n        \"#003300\",\n        \"#0000ff\",\n        \"#0000cc\",\n        \"#000099\",\n        \"#000066\",\n        \"#000033\"\n    ]\n}\n"}}],"shares":[{"id":"43815-41787-55966-74609","timestamp":1759618096274}],"lastSaveTime":1759932419988}